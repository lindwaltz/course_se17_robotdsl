#!/usr/bin/env python
from math import pow,atan2,sqrt

import itertools
import numpy as np
from scipy.spatial import distance

import rospy
from geometry_msgs.msg  import Twist
from turtlesim.msg import Pose


MISSION_STEPS = []
#foreach( $step in $steps )
MISSION_STEPS.append(${step})
#end

class turtle():
    def __init__(self):
        #Creating our node,publisher and subscriber
        rospy.init_node('turtlebot_controller', anonymous=True)
        self.velocity_publisher = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        self.pose_subscriber = rospy.Subscriber('/turtle1/pose', Pose, self.callback)
        self.pose = Pose()
        self.rate = rospy.Rate(10)

    #This is the tolerance of the controller, because the turtlesim is not the most accurate simulator
    self.tolerance = 0.1

    #Callback function implementing the pose value received
    #This saves the current position of the turtle in global coordinate system
    def callback(self, data):
        self.pose = data
        self.pose.x = round(self.pose.x, 4)
        self.pose.y = round(self.pose.y, 4)

    #Distance to the actual goal
    def get_distance(self, goal_x, goal_y):
        distance = sqrt(pow((goal_x - self.pose.x), 2) + pow((goal_y - self.pose.y), 2))
        return distance

    #This function drives the correct behavior of the robot in the turtle sim map
    def move2goal(self,posX,posY):
        goal_pose = Pose()
        goal_pose.x = posX
        goal_pose.y = posY
        distance_tolerance = self.tolerance
        vel_msg = Twist()
        while sqrt(pow((goal_pose.x - self.pose.x), 2) + pow((goal_pose.y - self.pose.y), 2)) >= distance_tolerance:
            #Porportional Controller
            #linear velocity in the x-axis:
            vel_msg.linear.x = 1.5 * sqrt(pow((goal_pose.x - self.pose.x), 2) + pow((goal_pose.y - self.pose.y), 2))
            vel_msg.linear.y = 0
            vel_msg.linear.z = 0

            #angular velocity in the z-axis:
            vel_msg.angular.x = 0
            vel_msg.angular.y = 0
            vel_msg.angular.z = 4 * (atan2(goal_pose.y - self.pose.y, goal_pose.x - self.pose.x) - self.pose.theta)

            #Publishing our vel_msg
            self.velocity_publisher.publish(vel_msg)
            self.rate.sleep()
        #Stopping our robot after the movement is over
        vel_msg.linear.x = 0
        vel_msg.angular.z =0
        self.velocity_publisher.publish(vel_msg)

def parse_steps(steps):
    coords = []
    for i, step in enumerate(steps):        
        if step[0] == "goto_line":
            coords.extend(step[1])
        else:
            coords.extend(shortest_path(step[1], coords[-1]))
    # remove dupes and return
    return [x[0] for x in itertools.groupby(coords)]

def shortest_path(points, start=None):
    """nearest neighbour heuristic"""
    if start is None:
        start = points[0]
    must_visit = points
    path = [start]
    must_visit.remove(start)
    while must_visit:
        nearest = min(must_visit, key=lambda x: distance.euclidean(path[-1], x))
        path.append(nearest)
        must_visit.remove(nearest)
    return path

if __name__ == '__main__':
    try:
        #Testing our function
        tb = turtle()        
        coordinate_list = parse_steps(MISSION_STEPS)
        for x,y in coordinate_list:
            tb.move2goal(x,y)

    except rospy.ROSInterruptException:
        pass
